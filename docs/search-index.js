var searchIndex = JSON.parse('{\
"ipns_entry":{"doc":"Create IPNS Entries in Rust","t":[3,11,11,11,0,11,11,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,12,11,2,2,5,0,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,12,11,11,11,12,11,12,11,11,11,11,11,12,11,11,12,11,12,11,12,11,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11],"n":["DataBuilder","borrow","borrow_mut","build","cbor","clone","clone_into","entry","fmt","from","increment_sequence","into","new","sequence","signer","to_owned","try_from","try_into","ttl","type_id","validity","value","vzip","Data","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_bytes","into","sequence","to_bytes","to_owned","try_from","try_into","ttl","type_id","validity","validity_type","value","vzip","IpnsEntry","ValidityType","deserialize","protobuf","IpnsEntry","borrow","borrow_mut","clear","clone","clone_into","data","data","decode_data","default","encoded_len","eq","fmt","from","from_bytes","get_public_key","into","ipns_entry","is_valid_for","new","pub_key","pub_key","sequence","sequence","set_validity_type","signables","signature_v1","signature_v1","signature_v2","signature_v2","to_bytes","to_owned","try_from","try_into","ttl","ttl","type_id","validity","validity","validity_type","validity_type","value","value","vzip","Eol","ValidityType","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","from","from","from","from_i32","hash","into","is_valid","partial_cmp","to_owned","try_from","try_into","type_id","vzip","Signables","Signed","Signer","V1Signer","V2Signer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","from","from","from","from","from","generate","into","into","into","into","into","keypair","new","new","new","public","sign","sign","sign","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","v1","v1","v2","v2","validity","validity_type","value","verify","verify","vzip","vzip","vzip","vzip","vzip"],"q":["ipns_entry","","","","","","","","","","","","","","","","","","","","","","","ipns_entry::cbor","","","","","","","","","","","","","","","","","","","","","ipns_entry::entry","","","","ipns_entry::entry::protobuf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ipns_entry::entry::protobuf::ipns_entry","","","","","","","","","","","","","","","","","","","","","","","","ipns_entry::signer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Example","","","Terminal method which generates the Signables from the …","CBOR serialization and deserialization for IPNS entries.","","","IPNS Entry built from Protobuf using prost in <code>./build.rs</code> …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new DataBuilder with the required value. The …","","Re-export of <code>libp2p_identity::Keypair</code>","","","","","","","","","Struct to hold the data to create the CBOR bytes.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>data</code>, or the default value if <code>data</code> is …","","Get Deserialized IpnsEntry.data as a DAG-CBOR document","","","","","Returns the argument unchanged.","Decode protobuf bytes into an IpnsEntry Ensures the bytes …","","Calls <code>U::from(self)</code>.","","Confirm values in IpnsEntry protobuf match deserialized …","","Returns the value of <code>pub_key</code>, or the default value if …","in order for nodes to properly validate a record upon …","Returns the value of <code>sequence</code>, or the default value if …","","Sets <code>validity_type</code> to the provided enum value.","","Returns the value of <code>signature_v1</code>, or the default value if …","","Returns the value of <code>signature_v2</code>, or the default value if …","","","","","","Returns the value of <code>ttl</code>, or the default value if <code>ttl</code> is …","","","Returns the value of <code>validity</code>, or the default value if …","","Returns the enum value of <code>validity_type</code>, or the default if …","","Returns the value of <code>value</code>, or the default value if <code>value</code> …","","","setting an EOL says “this record is valid until…”","","","","","","","","","","","","Returns the argument unchanged.","","Converts an <code>i32</code> to a <code>ValidityType</code>, or <code>None</code> if <code>value</code> is not …","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>ValidityType</code>.","","","","","","","","","","<em>Do not use.</em> For backward compatibility only.","Used to sign bytes created by <code>cbor::InputData{}.to_bytes()</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate a new ed25519 keypair for signing cbor data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new V1Signer","","","","Creates a IpnsEntry.signatureV1 by concatenating …","","","","","","","","","","","","","","","","","","","","","","","","Verify the V1Signer data using the keypair and signature","","","","",""],"i":[0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,23,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,24,22,29,32,33,24,22,29,32,33,29,24,22,29,32,33,0,24,22,29,32,33,33,29,32,33,29,29,32,33,24,22,29,32,33,24,22,29,32,33,24,22,29,32,33,24,22,24,22,33,33,33,32,33,24,22,29,32,33],"f":[0,[[]],[[]],[1],0,[1,1],[[]],0,[[1,2],3],[[]],[1,1],[[]],[4,1],[[1,5],1],0,[[]],[[],6],[[],6],[[1,5],1],[[],7],[[1,8],1],[[1,4],1],[[]],0,[[]],[[]],[9,9],[[]],[[9,9],10],[[9,2],3],[[]],[[],[[6,[9,[12,[11]]]]]],[[]],0,[9,[[14,[13]]]],[[]],[[],6],[[],6],0,[[],7],0,0,0,[[]],0,0,[[],[[17,[15,16]]]],0,0,[[]],[[]],[15],[15,15],[[]],[15],0,[15,[[17,[9,18]]]],[[],15],[15,19],[[15,15],10],[[15,2],3],[[]],[[],[[17,[15,16]]]],[[15,20],[[17,[21,18]]]],[[]],0,[[15,20],[[17,[10,18]]]],[[9,22],15],[15],0,[15,5],0,[[15,23]],[15,[[17,[24]]]],[15],0,[15],0,[15,[[14,[13]]]],[[]],[[],6],[[],6],[15,5],0,[[],7],[15],0,[15,23],0,[15],0,[[]],0,0,[[]],[[]],[23,23],[[]],[[23,23],25],[[],23],[[23,23],10],[[23,2],3],[5,23],[26,23],[[]],[19,23],[27,[[28,[23]]]],[23],[[]],[27,10],[[23,23],[[28,[25]]]],[[]],[[],6],[[],6],[[],7],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[]],[[]],[[]],[[]],[[]],[[],30],[[]],[[]],[[]],[[]],[[]],0,[30,29],[31,32],[[31,13],33],[29,21],[[29,24],[[6,[22,34]]]],[32,[[14,[13]]]],[33,[[14,[13]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,0,0,0,0,0,[32,10],[33,10],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"DataBuilder"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"u64"],[4,"Result"],[3,"TypeId"],[3,"SystemTime"],[3,"Data"],[15,"bool"],[4,"Infallible"],[4,"DecodeError"],[15,"u8"],[3,"Vec"],[3,"IpnsEntry"],[3,"DecodeError"],[6,"Result"],[3,"Error"],[15,"usize"],[3,"PeerId"],[4,"PublicKey"],[3,"Signed"],[4,"ValidityType"],[3,"Signables"],[4,"Ordering"],[15,"isize"],[15,"i32"],[4,"Option"],[3,"Signer"],[4,"Keypair"],[3,"Keypair"],[3,"V2Signer"],[3,"V1Signer"],[3,"SigningError"]]},\
"ipns_interop_test":{"doc":"ipns-interop-test","t":[5],"n":["check_go_ipfs"],"q":["ipns_interop_test"],"d":["fn to check whether go-ipfs is installed or not"],"i":[0],"f":[[[],1]],"p":[[6,"FunResult"]]},\
"ipns_server":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Server","borrow","borrow_mut","default","enable_autonat","enable_kademlia","from","into","new","start_with_tokio_executor","try_from","try_into","type_id","vzip"],"q":["ipns_server","","","","","","","","","","","","",""],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[],1],[1,1],[1,1],[[]],[[]],[[],1],[1,[[4,[[3,[2]]]]]],[[],5],[[],5],[[],6],[[]]],"p":[[3,"Server"],[8,"Error"],[3,"Box"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"ipns_utils":{"doc":"IPNS Utils","t":[2],"n":["entry"],"q":["ipns_utils"],"d":["IPNS Entry utils"],"i":[0],"f":[0],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
